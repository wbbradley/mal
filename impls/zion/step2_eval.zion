import readline {readline}
import copy {copy}
import reader {read_str}
import copy {Copy}
import printer {pr_str}
import types {
  MalList, MalError, MalStop, MalValue, MalEOF, MalInt, MalFloat, MalString,
  MalDict, MalVector, MalSymbol, MalLambda}

newtype Env = Env(Map String MalValue)

instance Copy Env {
  fn copy(env) {
    let Env(dict) = env
    return Env(dict.copy)
  }
}

instance HasDefault Env {
  fn new() => Env({})
}

let error = |x| => x.MalError.Left
let str_combine = |x, y| => "${x}${y}".MalString.Right

fn mal_add(a, b) => match a {
  MalInt(x) => match b {
    MalInt(y)       => Right(MalInt(x + y))
    MalFloat(y)     => Right(MalFloat(float(x) + y))
    MalString(y)    => str_combine(x, y)
  } else => "+ is not defined for ${a} and ${b}".error
  MalFloat(x) => match b {
    MalInt(y)     => Right(MalFloat(x + float(y)))
    MalFloat(y)   => Right(MalFloat(x + y))
    MalString(y)  => str_combine(x, y)
  } else => "+ is not defined for ${a} and ${b}".error
  MalString(x) => match b {
    MalString(y) => str_combine(x, y)
    MalInt(y)    => str_combine(x, y)
    MalFloat(y)  => str_combine(x, y)
  } else => "+ is not defined for ${a} and ${b}".error
} else => "+ is not defined for ${a} and ${b}".error

fn mal_sub(a, b) => match (a, b) {
  (MalInt(x), MalInt(y))       => Right(MalInt(x - y))
  (MalInt(x), MalFloat(y))     => Right(MalFloat(float(x) - y))
  (MalFloat(x), MalInt(y))     => Right(MalFloat(x - float(y)))
  (MalFloat(x), MalFloat(y))   => Right(MalFloat(x - y))
} else => "- is not defined for ${a} and ${b}".error

fn mal_div(a, b) => match (a, b) {
  (MalInt(x), MalInt(y))       => y != 0 ? Right(MalInt(x / y)) : "division by zero error".error
  (MalInt(x), MalFloat(y))     => Right(MalFloat(float(x) / y))
  (MalFloat(x), MalInt(y))     => y != 0 ? Right(MalFloat(x / float(y))) : "division by zero error".error
  (MalFloat(x), MalFloat(y))   => Right(MalFloat(x / y))
} else => "/ is not defined for ${a} and ${b}".error

fn mal_mul(a, b) => match (a, b) {
  (MalInt(x), MalInt(y))       => Right(MalInt(x * y))
  (MalInt(x), MalFloat(y))     => Right(MalFloat(float(x) * y))
  (MalFloat(x), MalInt(y))     => Right(MalFloat(x * float(y)))
  (MalFloat(x), MalFloat(y))   => Right(MalFloat(x * y))
} else => "* is not defined for ${a} and ${b}".error

fn make_builtin_2(name, func) {
  return |args| {
    if len(args) != 2 {
      return "incorrect number of args passed to ${name}. expected 2".error
    }
    return func(args[0], args[1])
  }
}

let base_env = Env({
  "+": MalLambda(make_builtin_2("+", mal_add)),
  "-": MalLambda(make_builtin_2("-", mal_sub)),
  "*": MalLambda(make_builtin_2("*", mal_mul)),
  "/": MalLambda(make_builtin_2("/", mal_div)),
})

fn _eval(env Env, x MalValue) Either MalStop MalValue => match x {
  MalList(l) => len(l) == 0 ? Right(x) : apply_list(env, eval_list(env, l, MalList))
  value      => eval_ast(env, value)
}

fn _read(x String) Either MalStop MalValue => x.read_str

fn apply_list(env, list Either MalStop MalValue) Either MalStop MalValue {
  match list {
    Right(MalList(elems)) {
      if elems[0] is MalLambda(func) {
        return func(elems[1:])
      } else {
        return "error: ${elems[0].pr_str(False)} cannot be called as a function".error
      }
    }
    left => return left
  }
}

fn _print(x MalValue) String => x.pr_str(False)

fn rep(env Env, x String) Either MalStop (Env, String) {
  let form = _read(x)
  match form {
    Left(error) => return Left(error)
    Right(mv) {
      let either_evaluated = _eval(env, mv)
      return match either_evaluated {
        Left(error) => Left(error)
        Right(evaluated) => Right((env, _print(evaluated)))
      }
    }
  }
}

fn main() {
  var env = base_env.copy
  while "user> ".readline is Just(input) {
    match rep(env, input) {
      Left(error) => print(error)
      Right((new_env, mv_str)) {
        env = new_env
        print(mv_str)
      }
    }
  }
}

fn lookup(env, s) {
  let Env(dict) = env
  return match dict[s] {
    Just(value) => Right(value)
    Nothing {
      let env_str = ", ".join("${k}: ${v.pr_str(False)}" for (k, v) in dict)
      "symbol ${s} is undefined (current env is {${env_str}})".error
    }
  }
}

fn eval_list(env Env, xs [MalValue], ctor) Either MalStop MalValue {
  let evaluated = []
  for x in xs {
    match _eval(env, x) {
      Right(value) => evaluated.append(value)
      Left(error)  => return Left(error)
    }
  }
  return Right(ctor(evaluated))
}

fn eval_ast(env Env, x MalValue) Either MalStop MalValue {
  return match x {
    MalSymbol(s) => lookup(env, s)
    MalList(l) => eval_list(env, l, MalList)
    MalVector(l) => eval_list(env, l, MalVector)
    MalDict(dict) => len(dict) == 0 ? Right(x) : eval_dict(env, dict)
    value => Right(value)
  }
}

fn eval_dict(env Env, dict Map String MalValue) {
  let new_dict
  for (key, value) in dict {
    match _eval(env, value) {
      Right(value) => new_dict[key] = value
      left => return left
    }
  }
  return Right(MalDict(new_dict))
}
