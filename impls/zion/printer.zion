import types {
  MalAtom, MalBool, MalNil, MalValue, MalInt, MalFloat, MalString, MalSymbol,
  MalList, MalKeyword, MalDict, MalError, MalBuiltin, MalLambda, MalEOF,
  MalStop, MalVector}

fn pr_str(m MalValue, print_readably Bool) String => match m {
  MalInt(i) => "${i}"
  MalNil => "nil"
  MalBool(b) => b ? "true" : "false"
  MalFloat(f) => "${f}"
  MalString(s) => print_readably ? s : escape_quotes(s)
  MalKeyword(k) => k
  MalSymbol(s) => s
  MalList(ls) => "(${" ".join(l.pr_str(print_readably) for l in ls)})"
  MalVector(xs) => "[${" ".join(x.pr_str(print_readably) for x in xs)}]"
  MalDict(dict) => pr_str_dict(dict, print_readably)
  MalBuiltin(name, func) => "${name}"
  MalLambda(ast, params, env, func) => "#(fn* (${" ".join(params)}) ${ast.pr_str(False)} +env ...)"
  MalAtom(var value) => "(atom ${value.pr_str(False)})"
}

fn pr_str_dict_pair(pair, print_readably Bool) {
  let (key, value) = pair
  return "${pr_str_dict_key(key)} ${pr_str(value, print_readably)}"
}

fn pr_str_dict_key(key) {
  if key.has_prefix("k|") {
    return "${key[2:]}"
  } else if key.has_prefix("z|") {
    return "${escape_quotes(key[2:])}"
  } else if key.has_prefix("i|") {
    return "${key[2:]}"
  } else if key == "nil" {
    return key
  } else {
    assert(False)
    return key
  }
}

fn pr_str_dict(dict, print_readably Bool) {
  return "{${" ".join(pr_str_dict_pair(pair, print_readably) for pair in dict)}}"
}

fn escape_quotes(s) {
  return "\"${s.replace("\\", "\\\\").replace("\"", "\\\"").replace("\n", "\\n")}\""
}
