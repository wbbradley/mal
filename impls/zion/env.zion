import types {MalValue, MalError, MalStop}
import printer {pr_str}

newtype Env = Env(Map String MalValue, Maybe Env)
let empty_env = new Env


instance HasDefault Env {
  fn new() => Env({}, Nothing)
}

instance HasAssignableIndexableItems Env String MalValue {
  fn set_indexed_item(env, symbol String, value MalValue) {
    let Env(dict, _) = env
    dict[symbol] = value
  }
}

instance HasIndexableItems Env String (Either MalStop MalValue) {
  fn get_indexed_item(env, symbol) {
    let Env(dict, outer) = env
    if dict[symbol] is Just(value) {
      return Right(value)
    } else if outer is Just(env) {
      return env[symbol]
    } else {
      return Left(MalError("Could not find symbol ${symbol}"))
    }
  }
}

fn symbol_not_found(env, s) {
  let Env(dict, _) = env
  let env_str = ", ".join("${k}: ${v.pr_str(False)}" for (k, v) in dict)
  return Left(MalError("${s} not found (current env is {${env_str}})"))
}
