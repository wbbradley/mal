import readline {readline}
import env {Env, symbol_not_found}
import reader {read_str}
import printer {pr_str}
import types {
  MalList, MalError, MalStop, MalValue, MalEOF, MalInt, MalFloat, MalString,
  MalNil, MalDict, MalVector, MalSymbol, MalLambda, error}
import builtins {builtins}

let str_combine = |x, y| => "${x}${y}".MalString.Right

fn mal_add(a, b) => match a {
  MalInt(x) => match b {
    MalInt(y)       => Right(MalInt(x + y))
    MalFloat(y)     => Right(MalFloat(float(x) + y))
    MalString(y)    => str_combine(x, y)
  } else => "+ is not defined for ${a} and ${b}".error
  MalFloat(x) => match b {
    MalInt(y)     => Right(MalFloat(x + float(y)))
    MalFloat(y)   => Right(MalFloat(x + y))
    MalString(y)  => str_combine(x, y)
  } else => "+ is not defined for ${a} and ${b}".error
  MalString(x) => match b {
    MalString(y) => str_combine(x, y)
    MalInt(y)    => str_combine(x, y)
    MalFloat(y)  => str_combine(x, y)
  } else => "+ is not defined for ${a} and ${b}".error
} else => "+ is not defined for ${a} and ${b}".error

fn mal_sub(a, b) => match (a, b) {
  (MalInt(x), MalInt(y))       => Right(MalInt(x - y))
  (MalInt(x), MalFloat(y))     => Right(MalFloat(float(x) - y))
  (MalFloat(x), MalInt(y))     => Right(MalFloat(x - float(y)))
  (MalFloat(x), MalFloat(y))   => Right(MalFloat(x - y))
} else => "- is not defined for ${a} and ${b}".error

fn mal_div(a, b) => match (a, b) {
  (MalInt(x), MalInt(y))       => y != 0 ? Right(MalInt(x / y)) : "division by zero error".error
  (MalInt(x), MalFloat(y))     => Right(MalFloat(float(x) / y))
  (MalFloat(x), MalInt(y))     => y != 0 ? Right(MalFloat(x / float(y))) : "division by zero error".error
  (MalFloat(x), MalFloat(y))   => Right(MalFloat(x / y))
} else => "/ is not defined for ${a} and ${b}".error

fn mal_mul(a, b) => match (a, b) {
  (MalInt(x), MalInt(y))       => Right(MalInt(x * y))
  (MalInt(x), MalFloat(y))     => Right(MalFloat(float(x) * y))
  (MalFloat(x), MalInt(y))     => Right(MalFloat(x * float(y)))
  (MalFloat(x), MalFloat(y))   => Right(MalFloat(x * y))
} else => "* is not defined for ${a} and ${b}".error

fn make_builtin_2(name, func) {
  return |args| {
    if len(args) != 2 {
      return "incorrect number of args passed to ${name}. expected 2".error
    }
    return func(args[0], args[1])
  }
}

let base_env = Env({
  "+": MalLambda(make_builtin_2("+", mal_add)),
  "-": MalLambda(make_builtin_2("-", mal_sub)),
  "*": MalLambda(make_builtin_2("*", mal_mul)),
  "/": MalLambda(make_builtin_2("/", mal_div)),
}, Nothing)

fn EVAL(env Env, x MalValue) Either MalStop MalValue => match x {
  MalList(l) {
    if len(l) == 0 {
      Right(x)
    } else {
      /* handle builtin special forms */
      if l[0] is MalSymbol(sym) {
        if builtins[sym] is Just(builtin) {
          return builtin(env, l, EVAL)
        }
      }

      apply_list(env, eval_list(env, l, MalList))
    }
  }
  value      => eval_ast(env, value)
}

fn READ(x String) Either MalStop MalValue => x.read_str

fn apply_list(env, list Either MalStop MalValue) Either MalStop MalValue {
  match list {
    Right(MalList(elems)) {
      if elems[0] is MalLambda(func) {
        return func(elems[1:])
      } else {
        return "${elems[0].pr_str} cannot be called as a function".error
      }
    }
    left => return left
  }
}

fn PRINT(x MalValue) String => x.pr_str

fn rep(env Env, x String) Either MalStop (Env, String) {
  let form = READ(x)
  match form {
    Left(error) => return Left(error)
    Right(mv) {
      let either_evaluated = EVAL(env, mv)
      return match either_evaluated {
        Left(error) => Left(error)
        Right(evaluated) => Right((env, PRINT(evaluated)))
      }
    }
  }
}

fn main() {
  base_env.REPL
}

fn REPL(repl_env) {
  var env = repl_env
  while "user> ".readline is Just(input) {
    match rep(env, input) {
      Left(error) => print(error)
      Right((new_env, mv_str)) {
        env = new_env
        print(mv_str)
      }
    }
  }
}

fn lookup(env, s) {
  let either_value = env[s]
  if either_value is Right(_) {
    return either_value
  }

  return env.symbol_not_found(s)
}

fn eval_list(env Env, xs [MalValue], ctor) Either MalStop MalValue {
  let evaluated = []
  for x in xs {
    match EVAL(env, x) {
      Right(value) => evaluated.append(value)
      Left(error)  => return Left(error)
    }
  }
  return Right(ctor(evaluated))
}

fn eval_ast(env Env, x MalValue) Either MalStop MalValue {
  return match x {
    MalSymbol(s) => lookup(env, s)
    MalList(l) => eval_list(env, l, MalList)
    MalVector(l) => eval_list(env, l, MalVector)
    MalDict(dict) => len(dict) == 0 ? Right(x) : eval_dict(env, dict)
    value => Right(value)
  }
}

fn eval_dict(env Env, dict Map String MalValue) {
  let new_dict
  for (key, value) in dict {
    match EVAL(env, value) {
      Right(value) => new_dict[key] = value
      left => return left
    }
  }
  return Right(MalDict(new_dict))
}
